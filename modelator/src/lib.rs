//! `modelator` is a framework for model-based testing.
#![warn(
    unreachable_pub,
    missing_docs,
    missing_copy_implementations,
    trivial_numeric_casts,
    unused_extern_crates,
    rust_2018_idioms
)]

/// Modelator's options.
mod options;

/// Modelator's error type.
mod error;

/// List of artifacts.
pub mod artifact;

/// List of modules.
pub mod module;

/// Caching of model-checker outputs.
mod cache;

/// Jar utilities.
mod jar;

/// Command-line interface.
mod cli;

/// Datastructure converter.
/// Allows to define conversion rules to make (cook)
/// concrete data-structures from the abstract ones for testing purposes.
pub mod datachef;

/// Utilitary functions.
mod util;

/// Provides the way to run sets of test functions on several kinds of test inputs.
pub mod tester;

/// A framework for event-based testing of message-passing systems
/// with possibly partitioned system state.
pub mod event;

/// Re-exports.
pub use cli::{output::CliOutput, output::CliStatus, CliOptions};
pub use datachef::Recipe;
pub use error::{Error, TestError};
pub use event::{ActionHandler, Event, EventStream, Runner, StateHandler};
pub use options::{ModelChecker, ModelCheckerOptions, ModelCheckerWorkers, Options};

use std::fmt::Debug;
use std::path::Path;

/// Given a [crate::artifact::TlaFile] with TLA+ test assertions,
/// as well as a [crate::artifact::TlaConfigFile] with TLA+ configuration,
/// generate all traces resulting from the test assertions.
///
/// The traces are generated by executing a model checker,
/// which can be selected via [crate::options::Options].
///
/// # Examples
///
/// ```
/// let tla_tests_file = "tests/integration/tla/NumbersAMaxBMinTest.tla";
/// let tla_config_file = "tests/integration/tla/Numbers.cfg";
/// let options = modelator::Options::default();
/// let traces = modelator::traces(tla_tests_file, tla_config_file, &options).unwrap();
/// println!("{:?}", traces);
/// ```
pub fn traces<P: AsRef<Path>>(
    tla_tests_file: P,
    tla_config_file: P,
    options: &Options,
) -> Result<Vec<artifact::JsonTrace>, Error> {
    // setup modelator
    setup(&options)?;

    // generate tla tests
    use std::convert::TryFrom;
    let tla_tests_file = artifact::TlaFile::try_from(tla_tests_file.as_ref())?;
    let tla_config_file = artifact::TlaConfigFile::try_from(tla_config_file.as_ref())?;
    let tests = module::Tla::generate_tests(tla_tests_file, tla_config_file)?;

    // run the model checker configured on each tla test
    let traces = tests
        .clone()
        .into_iter()
        .map(
            |(tla_file, tla_config_file)| match options.model_checker_options.model_checker {
                ModelChecker::Tlc => module::Tlc::test(tla_file, tla_config_file, options),
                ModelChecker::Apalache => {
                    module::Apalache::test(tla_file, tla_config_file, options)
                }
            },
        )
        .collect::<Result<Vec<_>, _>>()?;

    // cleanup test files created
    // for (tla_file, tla_config_file) in tests {
    //     std::fs::remove_file(tla_file.path()).map_err(Error::io)?;
    //     std::fs::remove_file(tla_config_file.path()).map_err(Error::io)?;
    // }

    // convert each tla trace to json
    traces
        .into_iter()
        .map(module::Tla::tla_trace_to_json_trace)
        .collect()
}

/// Run the concrete system using the abstract events obtained
/// from TLA+ traces. Traces are generated using [`traces`],
/// To interpret abstract events a [crate::Runner] needs to be created,
/// as well as [crate::StateHandler] and [crate::ActionHandler] to be implemented
/// for abstract states and actions you want to handle.
///
/// # Examples
///
/// ```
/// use modelator::{run, Runner, ActionHandler, StateHandler};
/// use serde::Deserialize;
///
/// // Suppose your system under test (SUT) consists of two integer variables.
/// // We can imagine these variables representing two independent state components.
/// #[derive(Default, Debug, PartialEq)]
/// struct Numbers {
///     a: i64,
///     b: i64,
/// }
///
/// // In order to drive your SUT, we could define two abstract states,
/// // that drive independently the variables `a` and `b`.
/// #[derive(Debug, Clone, Deserialize, PartialEq)]
/// struct A {
///     a: i64,
/// }
/// #[derive(Debug, Clone, Deserialize, PartialEq)]
/// struct B {
///     b: i64,
/// }
///
/// // We define StateHandlers that are able to initialize your SUT from
/// // these abstract states, as well as to read them at any point in time.
/// impl StateHandler<A> for Numbers {
///     fn init(&mut self, state: A) {
///         self.a = state.a
///     }
///     fn read(&self) -> A {
///         A { a: self.a }
///     }
/// }
/// impl StateHandler<B> for Numbers {
///     fn init(&mut self, state: B) {
///         self.b = state.b
///     }
///     fn read(&self) -> B {
///         B { b: self.b }
///     }
/// }
///
/// // We define also an action handler that processes abstract actions
/// impl ActionHandler<String> for Numbers {
///     type Outcome = ();
///
///     fn handle(&mut self, action: String) -> Self::Outcome {
///         match action.as_str() {
///             "IncreaseA" => self.a = self.a + 1,
///             "IncreaseB" => self.b = self.b + 2,
///             _ => panic!("unexpected action '{}'", action),
///         }
///     }
/// }
///
/// // To run your system against a TLA+ test, just point to the corresponding TLA+ files.
/// fn main() {
///     let tla_tests_file = "tests/integration/tla/NumbersAMaxBMinTest.tla";
///     let tla_config_file = "tests/integration/tla/Numbers.cfg";
///     let options = modelator::Options::default();
///     // We construct a runner, and tell it,
///     // which system it needs to run, as well asa which states and actions it should process.
///     let mut runner = Runner::<Numbers>::new()
///         .with_state::<A>()
///         .with_state::<B>()
///         .with_action::<String>();
///
///     // run your system against the traces produced from TLA+ tests.
///     let result = run(tla_tests_file, tla_config_file, &options, &mut runner);
///     // At each step of a test, the state of your system is being checked
///     // against the state that the TLA+ model expects
///     assert!(result.is_ok());
///     // You can also check the final state of your system, if you want.
///     assert_eq!(runner.system().a, 10);
///     assert_eq!(runner.system().b, 0);
/// }
/// ```
// #[allow(clippy::needless_doctest_main)]
#[allow(clippy::needless_doctest_main)]
pub fn run<P, System>(
    tla_tests_file: P,
    tla_config_file: P,
    options: &Options,
    runner: &mut event::Runner<System>,
) -> Result<(), TestError>
where
    P: AsRef<Path>,
    System: Debug + Default,
{
    let traces = traces(tla_tests_file, tla_config_file, options).map_err(TestError::Modelator)?;
    for trace in traces {
        let events: EventStream = trace.clone().into();
        runner.run(&mut events.into_iter()).map_err(|op| match op {
            TestError::UnhandledTest { system, .. } => TestError::UnhandledTest {
                test: trace.to_string(),
                system,
            },
            TestError::FailedTest {
                message,
                location,
                system,
                ..
            } => TestError::FailedTest {
                test: trace.to_string(),
                message,
                location,
                system,
            },
            other => other,
        })?;
    }
    Ok(())
}

pub(crate) fn setup(options: &Options) -> Result<(), Error> {
    // init tracing subscriber (in case it's not already)
    if let Err(e) = tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::EnvFilter::from_default_env())
        .try_init()
    {
        tracing::trace!(
            "modelator attempted to init the tracing_subscriber: {:?}",
            e
        );
    }

    // create modelator dir (if it doens't already exist)
    if !options.dir.as_path().is_dir() {
        std::fs::create_dir_all(&options.dir).map_err(Error::io)?;
    }

    // download missing jars
    jar::download_jars(&options.dir)?;
    tracing::trace!("modelator setup completed");

    Ok(())
}
