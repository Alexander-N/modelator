use clap::{Clap, Subcommand};

#[derive(Clap, Debug)]
#[clap(name = "modelator")]
pub struct CliOptions {
    #[clap(subcommand)]
    subcommand: Modules,
}

#[derive(Debug, Subcommand)]
enum Modules {
    /// Generate TLA+ test cases and parse TLA+ traces.
    Tla(TlaOptions),
    /// Generate TLA+ traces using Apalache.
    Apalache(ApalacheOptions),
    /// Generate TLA+ traces using TLC.
    Tlc(TlcOptions),
}

#[derive(Debug, Clap)]
pub enum TlaOptions {
    GenerateTests {
        /// TLA+ file with test cases.
        tla_file: String,
        // TLA+ config file with CONSTANTS, INIT and NEXT.
        tla_config_file: String,
    },
    TlaTraceToJsonTrace {
        /// File with a TLA+ trace produced by the Apalache or TLC modules.
        tla_trace_file: String,
    },
}

#[derive(Debug, Clap)]
pub enum ApalacheOptions {
    Test {
        /// TLA+ file generated by the generate-test method in the TLA module.
        tla_file: String,
        ///  TLA+ config file generated by the generate-test method in the TLA module.
        tla_config_file: String,
    },
}

#[derive(Debug, Clap)]
pub enum TlcOptions {
    Test {
        /// TLA+ file generated by the generate-test method in the TLA module.
        tla_file: String,
        ///  TLA+ config file generated by the generate-test method in the TLA module.
        tla_config_file: String,
    },
}
